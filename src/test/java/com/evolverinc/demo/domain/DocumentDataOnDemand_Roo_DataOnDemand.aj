// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.evolverinc.demo.domain;

import com.evolverinc.demo.domain.Document;
import com.evolverinc.demo.domain.DocumentDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect DocumentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DocumentDataOnDemand: @Component;
    
    private Random DocumentDataOnDemand.rnd = new SecureRandom();
    
    private List<Document> DocumentDataOnDemand.data;
    
    public Document DocumentDataOnDemand.getNewTransientDocument(int index) {
        Document obj = new Document();
        setContent(obj, index);
        setContentType(obj, index);
        setDescription(obj, index);
        setFilename(obj, index);
        setFilesize(obj, index);
        return obj;
    }
    
    public void DocumentDataOnDemand.setContent(Document obj, int index) {
        byte[] content = String.valueOf(index).getBytes();
        obj.setContent(content);
    }
    
    public void DocumentDataOnDemand.setContentType(Document obj, int index) {
        String contentType = "contentType_" + index;
        obj.setContentType(contentType);
    }
    
    public void DocumentDataOnDemand.setDescription(Document obj, int index) {
        String description = "description_" + index;
        if (description.length() > 500) {
            description = description.substring(0, 500);
        }
        obj.setDescription(description);
    }
    
    public void DocumentDataOnDemand.setFilename(Document obj, int index) {
        String filename = "filename_" + index;
        obj.setFilename(filename);
    }
    
    public void DocumentDataOnDemand.setFilesize(Document obj, int index) {
        Long filesize = new Integer(index).longValue();
        obj.setFilesize(filesize);
    }
    
    public Document DocumentDataOnDemand.getSpecificDocument(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Document obj = data.get(index);
        Long id = obj.getId();
        return Document.findDocument(id);
    }
    
    public Document DocumentDataOnDemand.getRandomDocument() {
        init();
        Document obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Document.findDocument(id);
    }
    
    public boolean DocumentDataOnDemand.modifyDocument(Document obj) {
        return false;
    }
    
    public void DocumentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Document.findDocumentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Document' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Document>();
        for (int i = 0; i < 10; i++) {
            Document obj = getNewTransientDocument(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
