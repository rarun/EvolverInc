// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.evolverinc.demo.domain;

import com.evolverinc.demo.domain.Customer;
import com.evolverinc.demo.domain.CustomerDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect CustomerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CustomerDataOnDemand: @Component;
    
    private Random CustomerDataOnDemand.rnd = new SecureRandom();
    
    private List<Customer> CustomerDataOnDemand.data;
    
    public Customer CustomerDataOnDemand.getNewTransientCustomer(int index) {
        Customer obj = new Customer();
        setAddress1(obj, index);
        setAddress2(obj, index);
        setCity(obj, index);
        setEmail(obj, index);
        setFname(obj, index);
        setLname(obj, index);
        setPassword(obj, index);
        setSt(obj, index);
        return obj;
    }
    
    public void CustomerDataOnDemand.setAddress1(Customer obj, int index) {
        String address1 = "address1_" + index;
        obj.setAddress1(address1);
    }
    
    public void CustomerDataOnDemand.setAddress2(Customer obj, int index) {
        String address2 = "address2_" + index;
        obj.setAddress2(address2);
    }
    
    public void CustomerDataOnDemand.setCity(Customer obj, int index) {
        String city = "city_" + index;
        obj.setCity(city);
    }
    
    public void CustomerDataOnDemand.setEmail(Customer obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public void CustomerDataOnDemand.setFname(Customer obj, int index) {
        String fname = "fname_" + index;
        obj.setFname(fname);
    }
    
    public void CustomerDataOnDemand.setLname(Customer obj, int index) {
        String lname = "lname_" + index;
        obj.setLname(lname);
    }
    
    public void CustomerDataOnDemand.setPassword(Customer obj, int index) {
        String password = "password_" + index;
        if (password.length() > 10) {
            password = password.substring(0, 10);
        }
        obj.setPassword(password);
    }
    
    public void CustomerDataOnDemand.setSt(Customer obj, int index) {
        String st = "st_" + index;
        obj.setSt(st);
    }
    
    public Customer CustomerDataOnDemand.getSpecificCustomer(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Customer obj = data.get(index);
        Long id = obj.getId();
        return Customer.findCustomer(id);
    }
    
    public Customer CustomerDataOnDemand.getRandomCustomer() {
        init();
        Customer obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Customer.findCustomer(id);
    }
    
    public boolean CustomerDataOnDemand.modifyCustomer(Customer obj) {
        return false;
    }
    
    public void CustomerDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Customer.findCustomerEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Customer' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Customer>();
        for (int i = 0; i < 10; i++) {
            Customer obj = getNewTransientCustomer(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
